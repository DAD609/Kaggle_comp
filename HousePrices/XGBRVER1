{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f1faa415",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-03T18:21:26.785607Z",
     "iopub.status.busy": "2024-06-03T18:21:26.785170Z",
     "iopub.status.idle": "2024-06-03T18:21:27.785190Z",
     "shell.execute_reply": "2024-06-03T18:21:27.784040Z"
    },
    "papermill": {
     "duration": 1.007541,
     "end_time": "2024-06-03T18:21:27.787869",
     "exception": false,
     "start_time": "2024-06-03T18:21:26.780328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ae640e42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-03T18:21:27.795881Z",
     "iopub.status.busy": "2024-06-03T18:21:27.795046Z",
     "iopub.status.idle": "2024-06-03T18:21:28.027042Z",
     "shell.execute_reply": "2024-06-03T18:21:28.025589Z"
    },
    "papermill": {
     "duration": 0.238815,
     "end_time": "2024-06-03T18:21:28.029885",
     "exception": false,
     "start_time": "2024-06-03T18:21:27.791070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OverallQual      0.790982\n",
      "GrLivArea        0.708624\n",
      "GarageCars       0.640409\n",
      "GarageArea       0.623431\n",
      "TotalBsmtSF      0.613581\n",
      "1stFlrSF         0.605852\n",
      "FullBath         0.560664\n",
      "TotRmsAbvGrd     0.533723\n",
      "YearBuilt        0.522897\n",
      "YearRemodAdd     0.507101\n",
      "GarageYrBlt      0.486362\n",
      "MasVnrArea       0.477493\n",
      "Fireplaces       0.466929\n",
      "FireplaceQu      0.402854\n",
      "BsmtFinSF1       0.386420\n",
      "MasVnrType       0.379400\n",
      "LotFrontage      0.351799\n",
      "WoodDeckSF       0.324413\n",
      "2ndFlrSF         0.319334\n",
      "OpenPorchSF      0.315856\n",
      "HalfBath         0.284108\n",
      "LotShape         0.267759\n",
      "LotArea          0.263843\n",
      "GarageFinish     0.247470\n",
      "BsmtExposure     0.244946\n",
      "BsmtFullBath     0.227122\n",
      "BsmtUnfSF        0.214479\n",
      "BedroomAbvGr     0.168213\n",
      "RoofStyle        0.159332\n",
      "SaleCondition    0.142503\n",
      "ScreenPorch      0.111447\n",
      "LotConfig        0.109106\n",
      "PoolArea         0.092404\n",
      "LandContour      0.092009\n",
      "GarageQual       0.083479\n",
      "SaleType         0.072896\n",
      "BsmtQual         0.058965\n",
      "PoolQC           0.051364\n",
      "LandSlope        0.051152\n",
      "MoSold           0.046432\n",
      "3SsnPorch        0.044584\n",
      "GarageCond       0.041361\n",
      "RoofMatl         0.035820\n",
      "Condition2      -0.004833\n",
      "BsmtFinSF2      -0.011378\n",
      "Utilities       -0.014314\n",
      "BsmtHalfBath    -0.016844\n",
      "MiscVal         -0.021190\n",
      "BsmtCond        -0.021549\n",
      "Id              -0.021917\n",
      "BsmtFinType2    -0.023492\n",
      "LowQualFinSF    -0.025606\n",
      "YrSold          -0.028923\n",
      "GarageType      -0.031803\n",
      "Street          -0.041036\n",
      "Condition1      -0.044820\n",
      "MiscFeature     -0.061128\n",
      "OverallCond     -0.077856\n",
      "MSSubClass      -0.084284\n",
      "Alley           -0.092607\n",
      "Heating         -0.106673\n",
      "Functional      -0.108367\n",
      "BldgType        -0.112611\n",
      "KitchenQual     -0.114746\n",
      "MSZoning        -0.116047\n",
      "Exterior1st     -0.120586\n",
      "ExterCond       -0.121706\n",
      "EnclosedPorch   -0.128578\n",
      "Fence           -0.128700\n",
      "KitchenAbvGr    -0.135907\n",
      "Neighborhood    -0.143621\n",
      "Exterior2nd     -0.164716\n",
      "HouseStyle      -0.188688\n",
      "PavedDrive      -0.208954\n",
      "Electrical      -0.230830\n",
      "CentralAir      -0.251328\n",
      "ExterQual       -0.265015\n",
      "BsmtFinType1    -0.299343\n",
      "HeatingQC       -0.427649\n",
      "Foundation      -0.429678\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "pd.set_option('display.max_rows', None)  # None означает без ограничений\n",
    "\n",
    "path_test = (\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\n",
    "path_train = (\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\n",
    "\n",
    "train_d = pd.read_csv(path_train)\n",
    "test_d = pd.read_csv(path_test)\n",
    "train_d.ffill(axis=0).fillna(0)\n",
    "test_d.ffill(axis=0).fillna(0)\n",
    "\n",
    "need_to_factorize  = train_d.select_dtypes(include=[\"object\"]).columns\n",
    "features = [col for col in train_d.columns if col != 'SalePrice']\n",
    "\n",
    "for column in need_to_factorize:\n",
    "    train_d[column], _ = pd.factorize(train_d[column])\n",
    "    \n",
    "  \n",
    "print(train_d[features].corrwith(train_d.SalePrice).sort_values(ascending=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd2450aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-03T18:21:28.037833Z",
     "iopub.status.busy": "2024-06-03T18:21:28.037489Z",
     "iopub.status.idle": "2024-06-03T18:21:30.249033Z",
     "shell.execute_reply": "2024-06-03T18:21:30.247340Z"
    },
    "papermill": {
     "duration": 2.222005,
     "end_time": "2024-06-03T18:21:30.255088",
     "exception": false,
     "start_time": "2024-06-03T18:21:28.033083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1019055129.py:29: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  X = X.fillna(method=\"bfill\").fillna(0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.582058</td>\n",
       "      <td>-0.408808</td>\n",
       "      <td>-0.612223</td>\n",
       "      <td>-0.383688</td>\n",
       "      <td>-0.147712</td>\n",
       "      <td>-0.205030</td>\n",
       "      <td>-0.447252</td>\n",
       "      <td>-0.348943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.233791</td>\n",
       "      <td>-0.243091</td>\n",
       "      <td>-0.346483</td>\n",
       "      <td>-0.199818</td>\n",
       "      <td>-0.858992</td>\n",
       "      <td>-0.518373</td>\n",
       "      <td>0.387165</td>\n",
       "      <td>-0.219497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.101137</td>\n",
       "      <td>-0.658382</td>\n",
       "      <td>-0.767586</td>\n",
       "      <td>0.148401</td>\n",
       "      <td>-0.397222</td>\n",
       "      <td>-0.161186</td>\n",
       "      <td>0.193516</td>\n",
       "      <td>0.411108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.523860</td>\n",
       "      <td>1.098343</td>\n",
       "      <td>1.169614</td>\n",
       "      <td>-0.433374</td>\n",
       "      <td>0.480179</td>\n",
       "      <td>1.519537</td>\n",
       "      <td>0.687486</td>\n",
       "      <td>-0.077414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.909325</td>\n",
       "      <td>0.159052</td>\n",
       "      <td>-0.753843</td>\n",
       "      <td>-0.062367</td>\n",
       "      <td>0.486431</td>\n",
       "      <td>0.254780</td>\n",
       "      <td>-0.398517</td>\n",
       "      <td>-0.241633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-1.277429</td>\n",
       "      <td>-0.306183</td>\n",
       "      <td>-0.442997</td>\n",
       "      <td>0.750907</td>\n",
       "      <td>-0.434331</td>\n",
       "      <td>0.085707</td>\n",
       "      <td>-0.800561</td>\n",
       "      <td>0.670162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.644808</td>\n",
       "      <td>-0.778848</td>\n",
       "      <td>-0.817939</td>\n",
       "      <td>-0.046217</td>\n",
       "      <td>-0.338741</td>\n",
       "      <td>0.295688</td>\n",
       "      <td>0.130601</td>\n",
       "      <td>-0.226416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.471476</td>\n",
       "      <td>0.231320</td>\n",
       "      <td>-0.543406</td>\n",
       "      <td>-0.313760</td>\n",
       "      <td>0.317060</td>\n",
       "      <td>-0.065835</td>\n",
       "      <td>0.424770</td>\n",
       "      <td>0.397432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.688670</td>\n",
       "      <td>0.823261</td>\n",
       "      <td>1.157906</td>\n",
       "      <td>-1.125655</td>\n",
       "      <td>-0.204301</td>\n",
       "      <td>0.332029</td>\n",
       "      <td>0.928706</td>\n",
       "      <td>-0.426197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-2.168866</td>\n",
       "      <td>0.293634</td>\n",
       "      <td>-0.085059</td>\n",
       "      <td>-0.098640</td>\n",
       "      <td>0.206163</td>\n",
       "      <td>0.205804</td>\n",
       "      <td>0.274290</td>\n",
       "      <td>0.073142</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2       PC3       PC4       PC5       PC6       PC7  \\\n",
       "0  1.582058 -0.408808 -0.612223 -0.383688 -0.147712 -0.205030 -0.447252   \n",
       "1 -0.233791 -0.243091 -0.346483 -0.199818 -0.858992 -0.518373  0.387165   \n",
       "2  1.101137 -0.658382 -0.767586  0.148401 -0.397222 -0.161186  0.193516   \n",
       "3 -0.523860  1.098343  1.169614 -0.433374  0.480179  1.519537  0.687486   \n",
       "4  2.909325  0.159052 -0.753843 -0.062367  0.486431  0.254780 -0.398517   \n",
       "5 -1.277429 -0.306183 -0.442997  0.750907 -0.434331  0.085707 -0.800561   \n",
       "6  1.644808 -0.778848 -0.817939 -0.046217 -0.338741  0.295688  0.130601   \n",
       "7  1.471476  0.231320 -0.543406 -0.313760  0.317060 -0.065835  0.424770   \n",
       "8  0.688670  0.823261  1.157906 -1.125655 -0.204301  0.332029  0.928706   \n",
       "9 -2.168866  0.293634 -0.085059 -0.098640  0.206163  0.205804  0.274290   \n",
       "\n",
       "        PC8  \n",
       "0 -0.348943  \n",
       "1 -0.219497  \n",
       "2  0.411108  \n",
       "3 -0.077414  \n",
       "4 -0.241633  \n",
       "5  0.670162  \n",
       "6 -0.226416  \n",
       "7  0.397432  \n",
       "8 -0.426197  \n",
       "9  0.073142  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# создание признаков\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "import seaborn as sns\n",
    "from sklearn.feature_selection import mutual_info_regression\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "pd.set_option('display.max_rows', None)  # None означает без ограничений\n",
    "\n",
    "path_test = (\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\n",
    "path_train = (\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\n",
    "\n",
    "train_d = pd.read_csv(path_train)\n",
    "test_d = pd.read_csv(path_test)\n",
    "train_d.ffill(axis=0).fillna(0)\n",
    "test_d.ffill(axis=0).fillna(0)\n",
    "need_to_factorize  = train_d.select_dtypes(include=[\"object\"]).columns\n",
    "for column in need_to_factorize:\n",
    "    train_d[column], _ = pd.factorize(train_d[column])\n",
    "train_d[\"totalarea\"] = 0.907*train_d[\"GrLivArea\"]+ 0.907*train_d[\"GarageArea\"] \n",
    "    \n",
    "features = [\"LotArea\",\"GrLivArea\",\"OverallQual\",\"TotRmsAbvGrd\",\"SaleCondition\",\"YearBuilt\",\"FullBath\",\"MasVnrArea\"]\n",
    "\n",
    "\n",
    "X = train_d.copy()\n",
    "y = X.pop('SalePrice')\n",
    "X = X.loc[:, features]\n",
    "X = X.fillna(method=\"bfill\").fillna(0)\n",
    "total_nans = X.isna().sum().sum()\n",
    "  # Standardize\n",
    "X_scaled = (X - X.mean(axis=0)) / X.std(axis=0)\n",
    "\n",
    "\n",
    "pca = PCA()\n",
    "\n",
    "X_p = pca.fit_transform(X_scaled)\n",
    "component_names = [f\"PC{i+1}\" for i in range(X_p.shape[1])]\n",
    "X_p = pd.DataFrame(X_p, columns=component_names)\n",
    "X_p.head(10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db8788c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-03T18:21:30.268270Z",
     "iopub.status.busy": "2024-06-03T18:21:30.266930Z",
     "iopub.status.idle": "2024-06-03T18:21:30.828122Z",
     "shell.execute_reply": "2024-06-03T18:21:30.827203Z"
    },
    "papermill": {
     "duration": 0.569874,
     "end_time": "2024-06-03T18:21:30.830970",
     "exception": false,
     "start_time": "2024-06-03T18:21:30.261096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBRegressor\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "import seaborn as sns\n",
    "from sklearn.feature_selection import mutual_info_regression\n",
    "import numpy as np # linear algebra\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "pd.set_option('display.max_rows', None)  # None означает без ограничений\n",
    "\n",
    "path_test = (\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\n",
    "path_train = (\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\n",
    "\n",
    "train_d = pd.read_csv(path_train)\n",
    "test_d = pd.read_csv(path_test)\n",
    "train_d.ffill(axis=0).fillna(0)\n",
    "test_d.ffill(axis=0).fillna(0)\n",
    "need_to_factorize  = train_d.select_dtypes(include=[\"object\"]).columns\n",
    "for column in need_to_factorize:\n",
    "    train_d[column], _ = pd.factorize(train_d[column])\n",
    "train_d[\"totalarea\"] = 0.907*train_d[\"GrLivArea\"]+ 0.907*train_d[\"GarageArea\"] \n",
    "    \n",
    "features = [\"LotArea\",\"GrLivArea\",\"OverallQual\",\"TotRmsAbvGrd\",\"YearBuilt\",\"FullBath\",\"MasVnrArea\"]\n",
    "\n",
    "\n",
    "X = train_d.copy()\n",
    "y = X.pop('SalePrice')\n",
    "X = X.loc[:, features]\n",
    "X_t = test_d.copy()\n",
    "X_t=X_t.loc[:,features]\n",
    "\n",
    "\n",
    "model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)\n",
    "model.fit(X,y)\n",
    "predictions = model.predict(X_t)\n",
    "\n",
    "output = pd.DataFrame({'Id': test_d.loc[X_t.index, 'Id'], 'SalePrice': predictions})\n",
    "\n",
    "# Сохранение результатов в CSV файл\n",
    "output.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 868283,
     "sourceId": 5407,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.789934,
   "end_time": "2024-06-03T18:21:31.455984",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-03T18:21:23.666050",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
