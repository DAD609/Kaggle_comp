{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "97edc35b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-05-30T11:58:55.388941Z",
     "iopub.status.busy": "2024-05-30T11:58:55.388458Z",
     "iopub.status.idle": "2024-05-30T11:59:42.147784Z",
     "shell.execute_reply": "2024-05-30T11:59:42.146418Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 46.768655,
     "end_time": "2024-05-30T11:59:42.150743",
     "exception": false,
     "start_time": "2024-05-30T11:58:55.382088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gitpython in /opt/conda/lib/python3.10/site-packages (3.1.41)\r\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.10/site-packages (from gitpython) (4.0.11)\r\n",
      "Requirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython) (5.0.1)\r\n",
      "Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from -r /kaggle/working/lnn/requirements.txt (line 1)) (2.1.2+cpu)\r\n",
      "Collecting einops (from -r /kaggle/working/lnn/requirements.txt (line 2))\r\n",
      "  Downloading einops-0.8.0-py3-none-any.whl.metadata (12 kB)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (3.13.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (4.9.0)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (1.12)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (3.2.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (3.1.2)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (2024.2.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (2.1.3)\r\n",
      "Requirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->-r /kaggle/working/lnn/requirements.txt (line 1)) (1.3.0)\r\n",
      "Downloading einops-0.8.0-py3-none-any.whl (43 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.2/43.2 kB\u001b[0m \u001b[31m739.3 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: einops\r\n",
      "Successfully installed einops-0.8.0\r\n",
      "Collecting liquidnet\r\n",
      "  Downloading liquidnet-0.0.5-py3-none-any.whl.metadata (3.0 kB)\r\n",
      "Requirement already satisfied: einops in /opt/conda/lib/python3.10/site-packages (from liquidnet) (0.8.0)\r\n",
      "Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from liquidnet) (2.1.2+cpu)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->liquidnet) (3.13.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch->liquidnet) (4.9.0)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->liquidnet) (1.12)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->liquidnet) (3.2.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->liquidnet) (3.1.2)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch->liquidnet) (2024.2.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->liquidnet) (2.1.3)\r\n",
      "Requirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->liquidnet) (1.3.0)\r\n",
      "Downloading liquidnet-0.0.5-py3-none-any.whl (7.1 kB)\r\n",
      "Installing collected packages: liquidnet\r\n",
      "Successfully installed liquidnet-0.0.5\r\n"
     ]
    }
   ],
   "source": [
    "!pip install gitpython\n",
    "from git import Repo\n",
    "path_to_clone = '/kaggle/working/lnn'\n",
    "repo_url = 'https://github.com/kyegomez/LiqudNet.git'\n",
    "Repo.clone_from(repo_url, path_to_clone)\n",
    "!pip install -r /kaggle/working/lnn/requirements.txt\n",
    "!pip install liquidnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "97892b9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-30T11:59:42.164758Z",
     "iopub.status.busy": "2024-05-30T11:59:42.164350Z",
     "iopub.status.idle": "2024-05-30T12:00:04.521056Z",
     "shell.execute_reply": "2024-05-30T12:00:04.519886Z"
    },
    "papermill": {
     "duration": 22.36712,
     "end_time": "2024-05-30T12:00:04.523963",
     "exception": false,
     "start_time": "2024-05-30T11:59:42.156843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-30 11:59:45.437452: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-30 11:59:45.437653: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-30 11:59:45.626416: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import keras_nlp\n",
    "import keras\n",
    "import torch\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from transformers import BertTokenizer\n",
    "from liquidnet.main import LiquidNet\n",
    "import torch.nn as nn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7704a85b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-30T12:00:04.538322Z",
     "iopub.status.busy": "2024-05-30T12:00:04.537439Z",
     "iopub.status.idle": "2024-05-30T12:00:04.706987Z",
     "shell.execute_reply": "2024-05-30T12:00:04.705759Z"
    },
    "papermill": {
     "duration": 0.180116,
     "end_time": "2024-05-30T12:00:04.710338",
     "exception": false,
     "start_time": "2024-05-30T12:00:04.530222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " \n",
    "# Загрузка данных\n",
    "train_df = pd.read_csv('/kaggle/input/bank-customer-churn-prediction-spark4ai/train.csv')\n",
    "test_df = pd.read_csv('/kaggle/input/bank-customer-churn-prediction-spark4ai/test.csv')\n",
    "\n",
    "# Удаление нерелевантных текстовых столбцов перед кодированием\n",
    "train_df = train_df.drop(columns=['Surname'])\n",
    "test_df = test_df.drop(columns=['Surname'])\n",
    "\n",
    "# Предобработка данных с использованием one-hot encoding\n",
    "train_df_encoded = pd.get_dummies(train_df, columns=['Geography', 'Gender'])\n",
    "test_df_encoded = pd.get_dummies(test_df, columns=['Geography', 'Gender'])\n",
    "\n",
    "# Удаление пропущенных значений\n",
    "train_df_clean = train_df_encoded.dropna()\n",
    "test_df_clean = test_df_encoded.dropna()\n",
    "\n",
    "# Выделение признаков и целевой переменной\n",
    "X_train = train_df_clean.drop('Exited', axis=1)\n",
    "y_train = train_df_clean['Exited']\n",
    "X_test = test_df_clean  # Используйте очищенный и закодированный тестовый датафрейм\n",
    "\n",
    "# Убедитесь, что 'Exited' не существует в тестовом наборе, если это тестовый датафрейм для соревнования\n",
    "# X_test = test_df_clean.drop('Exited', axis=1) если 'Exited' существует и должен быть удален\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9ae20f93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-30T12:00:04.726562Z",
     "iopub.status.busy": "2024-05-30T12:00:04.726169Z",
     "iopub.status.idle": "2024-05-30T12:01:59.846754Z",
     "shell.execute_reply": "2024-05-30T12:01:59.845505Z"
    },
    "papermill": {
     "duration": 115.131584,
     "end_time": "2024-05-30T12:01:59.849821",
     "exception": false,
     "start_time": "2024-05-30T12:00:04.718237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "# Подготовка данных\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "inputs = torch.tensor(X_train_scaled, dtype=torch.float32)\n",
    "\n",
    "# Для y_train, преобразуем pandas Series в NumPy массив и изменяем его форму\n",
    "y_train_np = y_train.to_numpy().reshape(-1, 1)\n",
    "\n",
    "# Создание тензора из NumPy массива\n",
    "targets = torch.tensor(y_train_np, dtype=torch.float32)  # y_train должен быть массивом\n",
    "\n",
    "# Определение модели\n",
    "class LiquidNetClassifier(nn.Module):\n",
    "    def __init__(self, num_units, num_classes=1):\n",
    "        super(LiquidNetClassifier, self).__init__()\n",
    "        self.ltc_cell = LiquidNet(num_units)\n",
    "        self.fc = nn.Linear(num_units, num_classes)\n",
    "\n",
    "    def forward(self, inputs, initial_state):\n",
    "        outputs, _ = self.ltc_cell(inputs, initial_state)\n",
    "        return torch.sigmoid(self.fc(outputs))\n",
    "\n",
    "model = LiquidNetClassifier(num_units=64)\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.01 )\n",
    "criterion = nn.BCELoss()\n",
    "\n",
    "# Обучение модели\n",
    "num_epochs = 10\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    initial_state = torch.zeros(inputs.size(0), 64, dtype=torch.float32)  # Задаем начальное состояние\n",
    "\n",
    "    predictions = model(inputs, initial_state)\n",
    "    loss = criterion(predictions, targets)\n",
    "    \n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ae5700c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-30T12:01:59.863280Z",
     "iopub.status.busy": "2024-05-30T12:01:59.862879Z",
     "iopub.status.idle": "2024-05-30T12:03:53.258151Z",
     "shell.execute_reply": "2024-05-30T12:03:53.257082Z"
    },
    "papermill": {
     "duration": 113.405417,
     "end_time": "2024-05-30T12:03:53.261153",
     "exception": false,
     "start_time": "2024-05-30T12:01:59.855736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Подготовка данных (пример)\n",
    "# Подготовка данных: предполагаем, что X_train и y_train уже загружены как DataFrame и Series\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)  # Нормализация признаков\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Преобразование данных в тензоры\n",
    "inputs = torch.tensor(X_train_scaled, dtype=torch.float32)\n",
    "targets = torch.tensor(y_train.to_numpy().reshape(-1, 1), dtype=torch.float32)  # Преобразование y_train в правильную форму\n",
    "\n",
    "# Определение модели\n",
    "class LiquidNetClassifier(nn.Module):\n",
    "    def __init__(self, num_units):\n",
    "        super(LiquidNetClassifier, self).__init__()\n",
    "        self.ltc_cell = LiquidNet(num_units)\n",
    "        self.fc = nn.Linear(num_units, 1)  # предполагаем, что выходной слой должен предсказывать один выход (вероятность)\n",
    "\n",
    "    def forward(self, inputs, initial_state):\n",
    "        outputs, _ = self.ltc_cell(inputs, initial_state)\n",
    "        return torch.sigmoid(self.fc(outputs))  # используем sigmoid для получения вероятности\n",
    "\n",
    "# Создание экземпляра модели\n",
    "num_units = 64\n",
    "model = LiquidNetClassifier(num_units)\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.01)\n",
    "criterion = nn.BCELoss()  # Binary Cross-Entropy Loss для задачи бинарной классификации\n",
    "\n",
    "# Обучение модели\n",
    "num_epochs = 10\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    # Подготовка начального состояния\n",
    "    initial_state = torch.zeros(inputs.size(0), num_units, dtype=torch.float32)\n",
    "\n",
    "    # Прямой проход\n",
    "    predictions = model(inputs, initial_state)\n",
    "    \n",
    "    # Расчет потерь\n",
    "    loss = criterion(predictions, targets)\n",
    "    \n",
    "    # Обратный проход\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "348a868a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-30T12:03:53.274629Z",
     "iopub.status.busy": "2024-05-30T12:03:53.274232Z",
     "iopub.status.idle": "2024-05-30T12:03:55.869482Z",
     "shell.execute_reply": "2024-05-30T12:03:55.868222Z"
    },
    "papermill": {
     "duration": 2.605085,
     "end_time": "2024-05-30T12:03:55.872187",
     "exception": false,
     "start_time": "2024-05-30T12:03:53.267102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    test_inputs = torch.tensor(X_test_scaled, dtype=torch.float32)\n",
    "    initial_state = torch.zeros(test_inputs.size(0), num_units)\n",
    "    test_predictions = model(test_inputs, initial_state)\n",
    "    test_predictions = test_predictions.numpy().flatten()  # Преобразование в numpy массив для сохранения в CSV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef48b692",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-30T12:03:55.885236Z",
     "iopub.status.busy": "2024-05-30T12:03:55.884837Z",
     "iopub.status.idle": "2024-05-30T12:03:55.919070Z",
     "shell.execute_reply": "2024-05-30T12:03:55.917856Z"
    },
    "papermill": {
     "duration": 0.044157,
     "end_time": "2024-05-30T12:03:55.922045",
     "exception": false,
     "start_time": "2024-05-30T12:03:55.877888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Сохранение предсказаний\n",
    "results_df = pd.DataFrame({\n",
    "    'id': test_df_clean['id'],\n",
    "    'Exited': test_predictions\n",
    "})\n",
    "results_df.to_csv('/kaggle/working/submission.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8346697,
     "sourceId": 76741,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 306.301977,
   "end_time": "2024-05-30T12:03:58.711044",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-30T11:58:52.409067",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
